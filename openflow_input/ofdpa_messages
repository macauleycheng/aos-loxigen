// Copyright 2014, Big Switch Networks, Inc.
//
// LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
// the following special exception:
//
// LOXI Exception
//
// As a special exception to the terms of the EPL, you may distribute libraries
// generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
// that copyright and licensing notices generated by LoxiGen are not altered or removed
// from the LoxiGen Libraries and the notice provided below is (i) included in
// the LoxiGen Libraries, if distributed in source code form and (ii) included in any
// documentation for the LoxiGen Libraries, if distributed in binary form.
//
// Notice: "Copyright 2014, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
//
// You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
// a copy of the EPL at:
//
// http://www.eclipse.org/legal/epl-v10.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// EPL for the specific language governing permissions and limitations
// under the EPL.

#version 4

//OFDPA experimental messages commands
enum ofdpa_message_mod_command (wire_type=uint32_t) {
    OFDPA_MSG_MOD_ADD = 0,
    OFDPA_MSG_MOD_MODIFY = 1,
    OFDPA_MSG_MOD_DELETE = 2,
};

//OFDPA action table type (used also as experimenter message subtype)
enum OFDPA_ACTION_TABLE_TYPE_t (wire_type=uint32_t) {
  OFDPA_EXP_MPLS_SET_QOS_MOD_MSG = 0,
  OFDPA_EXP_MPLS_SET_QOS_MULTIPART = 1,

  OFDPA_EXP_OAM_DATA_PLANE_COUNTER_MOD_MSG = 2,
  OFDPA_EXP_OAM_DATA_PLANE_COUNTER_MULTIPART = 3,

  OFDPA_EXP_DROP_STATUS_MOD_MSG = 4,
  OFDPA_EXP_DROP_STATUS_MULTIPART = 5,

  OFDPA_EXP_MPLS_VPN_LABEL_REMARK_MOD_MSG = 6,
  OFDPA_EXP_MPLS_VPN_LABEL_REMARK_MULTIPART = 7,

  OFDPA_EXP_MPLS_TUNNEL_LABEL_REMARK_MOD_MSG =	 8,
  OFDPA_EXP_MPLS_TUNNEL_LABEL_REMARK_MULTIPART =	 9,

  OFDPA_EXP_L2_INTERFACE_REMARK_MOD_MSG = 10,
  OFDPA_EXP_L2_INTERFACE_REMARK_MULTIPART = 11,

  OFDPA_EXP_CLASS_BASED_CTR_MOD_MSG = 12,
  OFDPA_EXP_CLASS_BASED_CTR_MULTIPART = 13,

  OFDPA_EXP_COLOR_BASED_CTR_MOD_MSG = 14,
  OFDPA_EXP_COLOR_BASED_CTR_MULTIPART = 15,

  OFDPA_EXP_SCHEDULER_NODE_MOD_MSG = 20,
  OFDPA_EXP_SCHEDULER_NODE_MULTIPART = 21,

  OFDPA_EXP_PORT_PROP_SCHEDULER = 16,
  OFDPA_EXP_QUEUE_MOD_MSG = 17,
  OFDPA_EXP_QUEUE_DESC_PROP_PARENT = 18,
  OFDPA_EXP_QUEUE_DESC_PROP_CONGESTION = 19
};

// ======================= OFDPA experimenter messages
struct of_experimenter_ofdpa : of_experimenter {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;

    uint32_t experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t subtype == ?;
    enum ofdpa_message_mod_command mod_command;

    of_octets_t data;
};

//stats is the old name of multipart type
struct of_experimenter_multipart_request_ofdpa : of_experimenter_stats_request {
    uint8_t version;
    uint8_t type == 18;
    uint16_t length;
    uint32_t xid;

    uint16_t stats_type == 0xffff;
    enum ofp_stats_request_flags flags;
    pad(4);

    uint32_t experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t subtype == ?;
};

//stats is the old name of multipart type
struct of_experimenter_multipart_reply_ofdpa : of_experimenter_stats_reply {
    uint8_t version;
    uint8_t type == 19;
    uint16_t length;
    uint32_t xid;

    uint16_t stats_type == 0xffff;
    enum ofp_stats_reply_flags flags;
    pad(4);

    uint32_t experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t subtype == ?;
};

// ======================= OFDPA action tables
// ======================= OFDPA MPLS set QOS
struct ofdpa_mpls_set_qos_action_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t subtype == 0;  // OFDPA_EXP_MPLS_SET_QOS_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint8_t   qos_index;
    uint8_t   mpls_tc;
    uint8_t   traffic_class;
    uint8_t   color;
};

struct ofdpa_mpls_set_qos_action_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t subtype == 1; // OFDPA_EXP_MPLS_SET_QOS_MULTIPART

    uint8_t   qos_index;
    uint8_t   mpls_tc;
    uint8_t   traffic_class;
    uint8_t   color;
    pad(4);
};

struct ofdpa_mpls_set_qos_action_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t subtype == 1; // OFDPA_EXP_MPLS_SET_QOS_MULTIPART

    uint8_t   qos_index;
    uint8_t   mpls_tc;
    uint8_t   traffic_class;
    uint8_t   color;
    pad(4);
};

// ======================= OFDPA OAM dataplane counter
struct ofdpa_oam_dataplane_ctr_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 2; // OFDPA_EXP_OAM_DATA_PLANE_COUNTER_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  lmep_id;
    uint64_t  transmit_packets;
    uint64_t  receive_packets;
    uint8_t   traffic_class;
    pad(7);
};

struct ofdpa_oam_dataplane_ctr_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 3; // OFDPA_EXP_MPLS_SET_QOS_MULTIPART

    uint32_t  lmep_id;
    uint64_t  transmit_packets;
    uint64_t  receive_packets;
    uint64_t  reference_count;
    uint8_t   traffic_class;
    pad(3);
};

struct ofdpa_oam_dataplane_ctr_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 3; // OFDPA_EXP_MPLS_SET_QOS_MULTIPART

    uint32_t  lmep_id;
    uint64_t  receive_packets;
    uint64_t  transmit_packets;
    uint64_t  reference_count;
    uint8_t   traffic_class;
    pad(3);
};

// ======================= OFDPA OAM drop status
struct ofdpa_oam_drop_status_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 4; // OFDPA_EXP_DROP_STATUS_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  index;
    uint8_t   entry_type;
    uint8_t   drop_status;
    pad(6);
};

struct ofdpa_oam_drop_status_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 5; // OFDPA_EXP_DROP_STATUS_MULTIPART

    uint32_t  mod_command;
    uint32_t  index;
    uint8_t   entry_type;
    uint8_t   drop_status;
    pad(1);
};

struct ofdpa_oam_drop_status_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 5; // OFDPA_EXP_DROP_STATUS_MULTIPART

    uint32_t  index;
    uint8_t   entry_type;
    uint8_t   drop_status;
    pad(1);
};

// ======================= OFDPA MPLS VPN label remark
struct ofdpa_mpls_vpn_label_remark_action_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 6; // OFDPA_EXP_MPLS_VPN_LABEL_REMARK_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(3);
};

struct ofdpa_mpls_vpn_label_remark_action_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 7; // OFDPA_EXP_MPLS_VPN_LABEL_REMARK_MULTIPART

    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(6);
};

struct ofdpa_mpls_vpn_label_remark_action_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 7; // OFDPA_EXP_MPLS_VPN_LABEL_REMARK_MULTIPART

    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(6);
};

// ======================= OFDPA tunnel VPN label remark
struct ofdpa_mpls_tunnel_label_remark_action_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 8; // OFDPA_EXP_MPLS_TUNNEL_LABEL_REMARK_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(3);
};

struct ofdpa_mpls_tunnel_label_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 9; // OFDPA_EXP_MPLS_TUNNEL_LABEL_REMARK_MULTIPART

    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(6);
};

struct ofdpa_mpls_tunnel_label_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 9; // OFDPA_EXP_MPLS_TUNNEL_LABEL_REMARK_MULTIPART

    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(6);
};

// ======================= OFDPA L2 interface remark
struct ofdpa_l2_interface_remark_action_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 10; // OFDPA_EXP_L2_INTERFACE_REMARK_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   dscp;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(3);
};

struct ofdpa_l2_interface_remark_action_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 11; // OFDPA_EXP_L2_INTERFACE_REMARK_MULTIPART

    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(6);
};

struct ofdpa_l2_interface_remark_action_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t  stats_type == 0xffff;
    enum      ofp_stats_reply_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 11; // OFDPA_EXP_L2_INTERFACE_REMARK_MULTIPART

    uint32_t  index;
    uint8_t   traffic_class;
    uint8_t   color;
    uint8_t   mpls_tc;
    uint8_t   vlan_pcp;
    uint8_t   vlan_dei;
    pad(6);
};

//=================== introduced in v.1.70 =========================================================
//=================== Class Based Counter Table

struct ofdpa_class_based_ctr_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 12;  // OFDPA_EXP_CLASS_BASED_CTR_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  block_index;
    uint64_t  transmit_packets;
    uint64_t  receive_packets;
    uint8_t   traffic_class;
    pad(6);
};

struct ofdpa_class_based_ctr_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 13; // OFDPA_EXP_CLASS_BASED_CTR_MULTIPART

    uint32_t  block_index;
    uint8_t   traffic_class;
    pad(3);
};

struct ofdpa_class_based_ctr_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 13; // OFDPA_EXP_CLASS_BASED_CTR_MULTIPART

    uint32_t  block_index;
    uint64_t  transmit_packets;
    uint64_t  receive_packets;
    uint64_t  reference_count;
    uint8_t   traffic_class;
    pad(3);
};

//=================== Color Based Counter Table
struct ofdpa_color_based_ctr_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 14; // OFDPA_EXP_COLOR_BASED_CTR_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint32_t  block_index;
    uint64_t  transmit_packets;
    uint64_t  receive_packets;
    uint8_t   color;
    pad(7);
};

struct ofdpa_color_based_ctr_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 15; // OFDPA_EXP_COLOR_BASED_CTR_MULTIPART

    uint32_t  block_index;
    uint64_t  transmit_packets;
    uint64_t  receive_packets;
    uint8_t   color;
    pad(7);
};

struct ofdpa_color_based_ctr_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 15; // OFDPA_EXP_COLOR_BASED_CTR_MULTIPART

    uint32_t  block_index;
    uint64_t  transmit_packets;
    uint64_t  receive_packets;
    uint8_t   color;
    pad(7);
};

//=================== Port Scheduling Property
// Openflow v.1.5 feature.
//
enum ofp_port_mod_prop_type (wire_type=uint16_t){
    OFPPMPT_ETERNET = 0,
    OFPPMPT_OPTICAL = 1,
    OFPPMPT_EXPERIMENTER = 0xFFFF
};

enum ofdpa_port_scheduling_modes (wire_type=uint16_t){
    OFDPA_PSM_SP =  1,      // Strict Priority
    OFDPA_PSM_RR =  2,      // Round Robin
    OFDPA_PSM_WRR = 3,      // Weighted Round Robin
    OFDPA_PSM_DWRR =  4,    // Weighted Deficit Round Robin
    OFDPA_PSM_WFQ =   5,    // Weighted Fair Queueing
    OFDPA_PSM_SP_WRR =  6,  // SP+WRR
    OFDPA_PSM_SP_DWRR = 7,  // SP+WDRR
    OFDPA_PSM_SP_WFQ =  8   // SP+WFQ
};

struct ofdpa_port_experimenter_prop_scheduling {
    //ofp_header
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;
    //ofp_port_mod body
    uint32_t port_no;
    pad(4);
    of_mac_addr_t hw_addr;
    pad(2);
    uint32_t config;
    uint32_t mask;
    //ofp_port_mod_prop_header
    enum ofp_port_mod_prop_type  pm_type == 0xffff;
    uint16_t  len;
    //ofp_port_mod_prop_experimenter_header
    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 16;  // OFDPA_EXP_PORT_PROP_SCHEDULER
    //ofp_port_mod_prop_experimenter_body
    enum ofdpa_port_scheduling_modes  mode;
    uint16_t  parameter;
};

//=================== Queue Modification and Properties
// Openflow v.1.5 feature.
//
enum ofp_queue_desc_prop_type {
    OFPQDPT_MIN_RATE = 1,         // Minimum datarate guaranteed.
    OFPQDPT_MAX_RATE = 2,         // Maximum datarate.
    OFPQDPT_EXPERIMENTER = 0xffff // Experimenter defined property.
};
struct ofp_queue_desc {
    uint32_t port_no;   // Port this queue is attached to.
    uint32_t queue_id;  // id for the specific queue.
    uint16_t len;       // Length in bytes of this queue desc.
    pad(6);             // 64-bit alignment.
};

struct ofdpa_queue_mod : of_experimenter_ofdpa {
    //ofp_header
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 17;  // OFDPA_EXP_QUEUE_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    pad(6);
    // ofp_queue_desc queue;
    uint32_t port_no;
    uint32_t queue_id;
    uint16_t len;
    pad(6);
};

//=================== OFPQDPT_EXPERIMENTER queue property for the parent relationship.
struct ofdpa_queue_desc_prop_parent_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t stats_type == 0xffff;
    enum ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 18; // OFDPA_EXP_QUEUE_DESC_PROP_PARENT

    uint16_t  scheduler_level;
    pad(2);
};

struct ofdpa_queue_desc_prop_parent_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t stats_type == 0xffff;
    enum ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 18; // OFDPA_EXP_QUEUE_DESC_PROP_PARENT

    uint16_t  scheduler_level;
    pad(2);
};

//=================== OFPQDPT_EXPERIMENTER queue property for congestion.

enum ofdpa_queue_desc_congestion(wire_type=uint16_t) {
    OFDPA_QDC_NONE = 1,
    OFDPA_QDC_TAIL_DROP = 2,
    OFDPA_QDC_WRED = 3
};

struct ofdpa_queue_desc_prop_congestion_multipart_request : of_experimenter_multipart_request_ofdpa {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t stats_type == 0xffff;
    enum ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 19; // OFDPA_EXP_QUEUE_DESC_PROP_CONGESTION

    enum ofdpa_queue_desc_congestion mode;
    pad(2);
};

struct ofdpa_queue_desc_prop_congestion_multipart_reply : of_experimenter_multipart_reply_ofdpa {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t stats_type == 0xffff;
    enum ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 19; // OFDPA_EXP_QUEUE_DESC_PROP_CONGESTION

    enum ofdpa_queue_desc_congestion  mode;
    pad(2);
};

//=================== Scheduler Node Modification and Properties
enum ofdpa_scheduler_node_modes (wire_type=uint16_t) {
    OFDPA_SNM_NONE =    0, // Unspecified
    OFDPA_SNM_SP =      1, // Strict Priority
    OFDPA_SNM_RR =      2, // Round Robin
    OFDPA_SNM_WRR =     3, // Weighted Round Robin
    OFDPA_SNM_DWRR =    4, // Weighted Deficit Round Robin
    OFDPA_SNM_WFQ =     5, // Weighted Fair Queueing
    OFDPA_SNM_SP_WRR =  6, // SP+WRR
    OFDPA_SNM_SP_DWRR = 7, // SP+WDRR
    OFDPA_SNM_SP_WFQ =  8  // SP+WFQ
};

struct ofdpa_scheduler_node_mod_msg : of_experimenter_ofdpa {
    uint8_t   version;
    uint8_t   type == 4;
    uint16_t  length;
    uint32_t  xid;

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 20;  // OFDPA_EXP_SCHEDULER_NODE_MOD_MSG

    enum ofdpa_message_mod_command mod_command;
    uint16_t  level;
    uint32_t  port;
    uint16_t  max_rate;
    uint16_t  min_rate;
    enum ofdpa_scheduler_node_modes  mode;
    uint16_t  weight;
};

struct ofdpa_scheduler_node_multipart_request {
    uint8_t   version;
    uint8_t   type == 18;
    uint16_t  length;
    uint32_t  xid;

    uint16_t stats_type == 0xffff;
    enum ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 21; // OFDPA_EXP_SCHEDULER_NODE_MULTIPART

    uint32_t  port;
    uint16_t  level;
    uint16_t  max_rate;
    uint16_t  min_rate;
    enum ofdpa_scheduler_node_modes  mode;
    uint16_t  weight;
    pad(2);
};

struct ofdpa_scheduler_node_multipart_response {
    uint8_t   version;
    uint8_t   type == 19;
    uint16_t  length;
    uint32_t  xid;

    uint16_t stats_type == 0xffff;
    enum ofp_stats_request_flags flags;
    pad(4);

    uint32_t  experimenter == 0x1018;
    enum OFDPA_ACTION_TABLE_TYPE_t  subtype == 21; // OFDPA_EXP_SCHEDULER_NODE_MULTIPART

    uint32_t  port;
    uint16_t  level;
    uint16_t  max_rate;
    uint16_t  min_rate;
    enum ofdpa_scheduler_node_modes mode;
    uint16_t  weight;
    pad(2);
};

//=================== Color Set Meter Band
//=================== OF-DPA Experimenter Meter Band types
enum ofdpa_meter_band_exp_type (wire_type=uint16_t) {
  OFDPA_OFPMBT_COLOR_SET =  1,
    //OF_METER_BAND_OFDPA_COLOR_SET = 1,
 };

//=================== OF-DPA Experimenter Color Set Meter Band Modes
enum ofdpa_color_set_band_mode (wire_type=uint8_t) {
    OFDPA_COLOR_SET_BAND_MODE_TRTCM =   1,
    OFDPA_COLOR_SET_BAND_MODE_SRTCM =   2,
    OFDPA_COLOR_SET_BAND_MODE_RFC4115 = 3,
};

//=================== OFPMT_EXPERIMENTER band for Color Set
//struct ofp_meter_band_experimenter_color_set : of_meter_band_experimenter {
struct of_meter_band_ofdpa_color_set : of_meter_band_experimenter {
    uint16_t        type == 65535;
    uint16_t        len;
    uint32_t        rate;
    uint32_t        burst_size;
    uint32_t        experimenter == 0x1018;
    uint16_t        subtype == 3;
    enum ofdpa_color_set_band_mode mode;
    uint8_t   color_aware;
    uint8_t         color;
    pad(3);
};
