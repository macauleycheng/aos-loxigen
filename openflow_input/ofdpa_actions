// Copyright 2014, Big Switch Networks, Inc.
//
// LoxiGen is licensed under the Eclipse Public License, version 1.0 (EPL), with
// the following special exception:
//
// LOXI Exception
//
// As a special exception to the terms of the EPL, you may distribute libraries
// generated by LoxiGen (LoxiGen Libraries) under the terms of your choice, provided
// that copyright and licensing notices generated by LoxiGen are not altered or removed
// from the LoxiGen Libraries and the notice provided below is (i) included in
// the LoxiGen Libraries, if distributed in source code form and (ii) included in any
// documentation for the LoxiGen Libraries, if distributed in binary form.
//
// Notice: "Copyright 2014, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler."
//
// You may not use this file except in compliance with the EPL or LOXI Exception. You may obtain
// a copy of the EPL at:
//
// http://www.eclipse.org/legal/epl-v10.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// EPL for the specific language governing permissions and limitations
// under the EPL.

#version 4


//======================= OFDPA extension action ===================================================
enum ofdpa_action_subtypes (wire_type=uint16_t){
    OFDPA_ACT_PUSH_L2_Header                      = 1,
    OFDPA_ACT_POP_L2_Header                       = 2,
    OFDPA_ACT_PUSH_CW                             = 3,
    OFDPA_ACT_POP_CW_OR_ACH                       = 4,
    OFDPA_ACT_COPY_TC_IN                          = 5,
    OFDPA_ACT_COPY_TC_OUT                         = 6,
    OFDPA_ACT_SET_MPLS_TC_FROM_VPN_TABLE         = 7,
    OFDPA_ACT_SET_DSCP_FROM_TABLE                 = 8,
    OFDPA_ACT_SET_PCPDEI_FROM_TABLE               = 9,
    OFDPA_ACT_OAM_LM_TX_COUNT                     = 10,
    OFDPA_ACT_OAM_LM_RX_COUNT                     = 11,
    OFDPA_ACT_OAM_SET_COUNTER_FIELDS              = 12,
    OFDPA_ACT_DEC_TTL_MTU                         = 13,
    OFDPA_ACT_CHECK_DROP_STATUS                   = 14,
    OFDPA_ACT_MPLS_SET_QOS_FROM_TABLE             = 15,
    OFDPA_ACT_SET_MPLS_PCPDEI_FROM_VPN_TABLE     = 16,
    OFDPA_ACT_SET_MPLS_TC_FROM_TUNNEL_TABLE       = 17,
    OFDPA_ACT_SET_MPLS_PCPDEI_FROM_TUNNEL_TABLE  = 18,
    OFDPA_ACT_CLASS_BASED_TX_COUNT                = 19,
    OFDPA_ACT_CLASS_BASED_RX_COUNT                = 20,
    OFDPA_ACT_COLOR_BASED_TX_COUNT                = 21,
    OFDPA_ACT_COLOR_BASED_RX_COUNT                = 22
};

struct of_action_ofdpa : of_action_experimenter {
    uint16_t  type == 0xffff;
    uint16_t  len;
    uint32_t  experimenter == 0x1018;
    uint16_t  subtype == ?;
    pad(6);
};
// Push L2 Header
// Arguments: None
// Push a new outermost Ethernet header on the packet.
struct of_action_ofdpa_push_l2hdr : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 1;          // OFDPA_ACT_PUSH_L2_Header =  1
    pad(6);
};

// Pop L2 Header
// Arguments: None
// Pop the outermost Ethernet header from the packet.
// The header cannot have a VLAN tag.
struct of_action_ofdpa_pop_l2hdr : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 2;           // OFDPA_ACT_POP_L2_Header = 2,
    pad(6);
};

// Push CW
// Arguments: None
// Push MPLS-TP PW Control Word.
// The Control Word is initialized to zero.
    struct of_action_ofdpa_push_cw : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 3;           // OFDPA_ACT_PUSH_CW = 3,
    pad(6);
};

// Pop CW or ACH
// None
// Pop MPLS-TP PW Control Word or Associated Channel Header.
// Used in MPLS bottom of stack label match actions.
struct of_action_ofdpa_pop_cw : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 4;           // OFDPA_ACT_POP_CW_OR_ACH = 4
    pad(6);
};

// Copy TC In
// None
// Copy EXP field value in.
// Used in conjunction with popping an MPLS label.
struct of_action_ofdpa_copy_tc_in : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 5;           // OFDPA_ACT_COPY_TC_IN = 5
    pad(6);
};

// Copy TC Out
// Arguments: None
// Copy EXP value out, used when pushing a label.
struct of_action_ofdpa_copy_tc_out : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 6;           // OFDPA_ACT_COPY_TC_OUT = 6,
    pad(6);
};

// Set MPLS TC From VPN Table
// Arguments: QoS Index [, Traffic Class, Color]
// MPLS label EXP field re-mark action based on packet Traffic Class, Color
// and the provided QoS index argument to look up the new value in the MPLS VPN Label Remark Action Table.
// Traffic Class and Color are the current values of the pipeline match fields and are supplied by the switch.
struct of_action_ofdpa_set_mpls_tc_from_vpn_table : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 7;           // OFDPA_ACT_SET_MPLS_TC_FROM_VPN_TABLE
    uint8_t   qos_index;              // qos index argument
    uint8_t   traffic_class;          // traffic class, supplied by switch
    uint8_t   color;                  // color, supplied by switch
    uint8_t   mpls_tc;                // MPLS TC Field (3 bits)
    pad(2);
 };

// Set DSCP From Table
// Arguments: QoS Index [, Traffic Class, Color]
// Used to re-mark packet IP header DSCP field based on the packet Traffic Class,
// Color, and the provided QoS index argument to look up a value in the L2 Interface Re-mark table.
// Traffic Class and Color are the current values of the pipeline match fields and can be supplied by the switch.
struct of_action_ofdpa_set_dscp_from_table : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 8;           // OFDPA_ACT_SET_DSCP_FROM_TABLE
    uint8_t   qos_index;              // qos index argument
    uint8_t   traffic_class;          // traffic class, supplied by switch
    uint8_t   color;                  // color, supplied by switch
    pad(3);
};

// Set PCP DEI From Table
// QoS Index [, Traffic Class, Color]
// Used to re-mark packet outer VLAN tag PCP and DEI fields based on the packet Traffic Class, Color
// and the provided QoS index argument to look up a value in the L2 Interface Re-mark table provided.
// Traffic Class and Color are the current values of the pipeline match fields and can be supplied by the switch.
struct of_action_ofdpa_set_pcpdei_from_table : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 9;           // OFDPA_ACT_SET_PCP_DEI_FROM_TABLE
    uint8_t   qos_index;              // qos index argument
    uint8_t   traffic_class;          // traffic class, supplied by switch
    uint8_t   color;                  // color, supplied by switch
    pad(3);
};

// OAM_LM_TX_Count
// Arguments: LMEP_Id [, Traffic Class]
// Update loss measurement transmit counter (TxFC1) in the OAM Data Plane Counter Table for a Maintenance Point.
// The switch supplies the current value of the Traffic Class pipeline match field if a zero argument supplied.
struct of_action_ofdpa_oam_lm_tx_count : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 10;          // OFDPA_ACT_OAM_LM_TX_COUNT
    uint16_t  traffic_class;          // traffic class, supplied by switch
    uint32_t  lmep_id;
};

// OAM_LM_RX_Count
// Arguments: LMEP_Id [, Traffic Class]
// Update loss measurement receive counter (RxFCl) in the OAM Data Plane Counter Table for a Maintenance Point.
// The switch supplies the current value of the Traffic Class pipeline match field if a zero argument supplied.
struct of_action_ofdpa_oam_lm_rx_count : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 11;          // OFDPA_ACT_OAM_LM_RX_COUNT
    uint16_t  traffic_class;          // traffic class, supplied by switch
    uint32_t  lmep_id;
};

// Set-Counter-Fields
// Arguments: LMEP_Id , Traffic Class
// Set pipeline metadata fields (TxFCl, RxFCl) from the indicated OAM Data Plane Counter Table entry.
// Set pipeline metadata field RxTime from the current timestamp.
// These along with the LMEP Id are sent with PDUs that are output to a Network Protection App.
// Traffic Class is the VLAN_PCP header field value.
struct of_action_ofdpa_set_counter_fields : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 12;          // OFDPA_ACT_OAM_SET_COUNTER_FIELDS
    uint16_t  traffic_class;          // traffic class from VLAN PCP
    uint32_t  lmep_id;
    pad(2);
};

// Decrement TTL and do MTU check
// Arguments: None
// Decrement TTL and do MTU check.
struct of_action_ofdpa_dec_ttl_mtu : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 13;          // OFDPA_ACT_DEC_TTL_MTU
    pad(6);
};

// Check Drop-Status
// Arguments: index, type
// Drops the packet if the indexed entry action indicates drop.
struct of_action_ofdpa_check_drop_status : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 14;          // OFDPA_ACT_CHECK_DROP_STATUS
    uint16_t  drop_type;              // type of drop status entry
    uint32_t  drop_index;             //
};

// Set-MPLS-QoS-from-Table
// Arguments: QoS Index, MPLS_TC
// Set Traffic Class and Color pipeline match fields from action table using value of MPLS_TC parsed from shim header.
struct of_action_ofdpa_set_mpls_qos_from_table : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 15;          // OFDPA_ACT_MPLS_SET_QOS_FROM_TABLE
    uint8_t   qos_index;              // qos index argument
    uint8_t   mpls_tc;                // should be supplied by switch
    pad(4);
};

// Set MPLS PCP DEI From VPN Table
// Arguments: QoS Index [, Traffic Class, Color]
// Outer VLAN tag re-mark action for PCP and DEI fields based on packet Traffic Class, Color
// and the provided QoS index argument to look up the new value in an MPLS VPN Label Re-mark Action Table.
// Traffic Class and Color are the current values of the pipeline match fields and are supplied by the switch.
struct of_action_ofdpa_set_mpls_pcpdei_from_table : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 16;         // OFDPA_ACT_SET_MPLS_PCP_DEI_FROM_VPN_TABLE
    uint8_t   qos_index;              // qos index argument
    uint8_t   traffic_class;          // traffic class, supplied by switch
    uint8_t   color;                  // color, supplied by switch
    uint8_t   pcp_dei;                // new PCP and DEI values (4 bits)
    pad(2);
};

// Set MPLS TC From Tunnel Table
// Arguments: QoS Index [, Traffic Class, Color]
// Same as above but for Tunnel Groups.
// Uses the MPLS Tunnel Remark Action Table.
// Traffic Class and Color are the current values of the pipeline match fields and are supplied by the switch.
struct of_action_ofdpa_set_mpls_tc_from_tunnel_table : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:
    uint16_t  subtype == 17;         // OFDPA_ACT_SET_MPLS_TC_FROM_TUNNEL_TABLE
    uint8_t   qos_index;              // qos index argument
    uint8_t   traffic_class;          // traffic class, supplied by switch
    uint8_t   color;                  // color, supplied by switch
    uint8_t   mpls_tc;                // MPLS TC Field (3 bits)
    pad(2);
};

// Set MPLS PCP DEI From Tunnel Table
// Arguments: QoS Index [, Traffic Class, Color]
// Same as above but for Tunnel Groups.
// Uses the MPLS Tunnel Remark Action Table.
struct of_action_ofdpa_set_mpls_pcpdei_from_tunnel_table : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 18;         // OFDPA_ACT_SET_MPLS_PCP_DEI_FROM_VPN_TABLE
    uint8_t   qos_index;              // qos index argument
    uint8_t   traffic_class;          // traffic class, supplied by switch
    uint8_t   color;                  // color, supplied by switch
    uint8_t   pcp_dei;                // New PCP and DEI values (4 bits)
    pad(2);
};

// Class Based TX Count
// Arguments: Index [, Traffic Class]
// Increment packet and byte counters for the class based block of counters at the specified index.
struct of_action_ofdpa_class_based_tx_count : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 19;         // OFDPA_ACT_CLASS_BASED_TX_COUNT
    uint16_t  traffic_class;          // Should be supplied by switch
    uint32_t  index;                  // Block index argument
};

// Class Based RX Count
// Arguments: Index [, Traffic Class]
// Increment packet and byte counters for the class based block of counters at the specified index.
struct of_action_ofdpa_class_based_rx_count : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 20;         // OFDPA_ACT_CLASS_BASED_RX_COUNT
    uint16_t  traffic_class;          // Should be supplied by switch
    uint32_t  index;                  // Block index argument
};


// Color Based TX Count
// Arguments: Index [, Color]
// Increment packet and byte counters for the color based block of counters at the specified index.
struct of_action_ofdpa_color_based_tx_count : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 21;         // OFDPA_ACT_COLOR_BASED_TX_COUNT
    uint16_t  act_color;                  // Should be supplied by switch
    uint32_t  index;                  // Block index argument
};

// Color Based RX Count
// Arguments: Index [, Color]
// Increment packet and byte counters for the color based block of counters at the specified index.
struct of_action_ofdpa_color_based_rx_count : of_action_ofdpa {
    uint16_t  type == 0xffff;         // OFPT_EXPERIMENTER
    uint16_t  len;
    uint32_t  experimenter == 0x1018; // Experimenter ID:

    uint16_t  subtype == 22;         // OFDPA_ACT_COLOR_BASED_RX_COUNT
    uint16_t  act_color;                  // Should be supplied by switch
    uint32_t  index;                  // block index argument
};